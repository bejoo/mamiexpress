// Generated by CoffeeScript 1.6.3
(function() {
  var positionsApp,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Bejoo.sapiURL = window.Bejoo.sapiurl + "organisation/";

  Handlebars.registerHelper('printDate', function(date) {
    return moment(date).format('DD.MM.YYYY');
  });

  Backbone.Marionette.TemplateCache.prototype.compileTemplate = function(rawTemplate) {
    return Handlebars.compile(rawTemplate);
  };

  positionsApp.module('Models', function(Models, App, Backbone, Marionette, $, _) {
    var _ref, _ref1;
    Models.Position = (function(_super) {
      __extends(Position, _super);

      function Position() {
        _ref = Position.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Position.prototype.parse = function(pos) {
        pos.from = new Date(pos.from);
        pos.to = new Date(pos.to);
        return pos;
      };

      return Position;

    })(Backbone.Model);
    return Models.Positions = (function(_super) {
      __extends(Positions, _super);

      function Positions() {
        _ref1 = Positions.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      Positions.prototype.model = Models.Position;

      Positions.prototype.url = "" + Bejoo.sapiURL + "position";

      Positions.prototype.comparator = function(a, b) {
        if (a.get('from') > b.get('from')) {
          return 1;
        } else {
          return -1;
        }
      };

      return Positions;

    })(Backbone.Collection);
  });

  positionsApp = new Backbone.Marionette.Application;

  positionsApp.module('Controller', function(PositionsController, App, Backbone, Marionette, $, _) {
    PositionsController.Controller = (function(_super) {
      __extends(Controller, _super);

      function Controller() {}

      Controller.prototype.start = function() {
        var createView;
        createView = new positionsApp.View.CreatePosition();
        createView.show();
        return App.vent.on('position:add', function(position) {
          return that.positions.add(position);
        });
      };

      return Controller;

    })(Marionette.Controller);
    return PositionsController.addInitializer(function() {
      var controller;
      controller = new PositionsController.Controller;
      return controller.start();
    });
  });

  positionsApp.module('Views', function(Views, App, Backbone) {
    var Helpers, _ref;
    Helpers = {
      calculatePensum: (function(weeklyHours) {
        return function(workload) {
          return Math.round(workload / weeklyHours * 1000) / 10;
        };
      })(Bejoo.organisation.weeklyHours)
    };
    return Views.CreatePosition = (function(_super) {
      __extends(CreatePosition, _super);

      function CreatePosition() {
        _ref = CreatePosition.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      CreatePosition.prototype.template = Handlebars.compile($('#create-view-template').html());

      CreatePosition.prototype.el = 'article#content';

      CreatePosition.prototype.events = {
        'click .submit-position': 'submitPosition',
        'click .x': 'hide',
        'change #workload-position': 'workloadChanged'
      };

      CreatePosition.prototype.ui = {
        title: '.title-position',
        indefinite: '#indefinite',
        description: '.description-position',
        workload: '#workload-position',
        from: '.from-position',
        to: '.to-position',
        pensum: '.pensum-number',
        duration: '#duration',
        mon: '#mon',
        tue: '#tue',
        wed: '#wed',
        thu: '#thu',
        fri: '#fri',
        sat: '#sat',
        sun: '#sun'
      };

      CreatePosition.prototype.show = function() {
        if (!$('article#content #create-panel').length) {
          $('article#content').prepend(this.render());
          this.bindUIElements();
          return this.workloadChanged();
        } else {
          return $('#create-panel').show();
        }
      };

      CreatePosition.prototype.hide = function() {
        return $('#create-panel').hide();
      };

      CreatePosition.prototype.render = function() {
        return this.template({});
      };

      CreatePosition.prototype.submitPosition = function(e) {
        var formData, position;
        e.preventDefault();
        formData = this.formData();
        formData.created_at = new Date;
        formData.closed_at = new Date;
        formData.user_id = 83;
        position = new positionsApp.Models.Position(formData);
        positionsApp.vent.trigger('position:add', position);
        return position.save();
      };

      CreatePosition.prototype.checkboxToValue = function(box) {
        if (box.is(':checked')) {
          return 1;
        } else {
          return 0;
        }
      };

      CreatePosition.prototype.formData = function() {
        return {
          title: this.ui.title.val(),
          description: this.ui.description.val(),
          workload: parseFloat(this.ui.workload.val(), 10),
          from: new Date(this.ui.from.val()),
          to: new Date(this.ui.to.val()),
          duration: this.ui.duration.val(),
          indefinite: this.ui.indefinite.val(),
          weekdays: {
            Mon: this.checkboxToValue(this.ui.mon),
            Tue: this.checkboxToValue(this.ui.tue),
            Wed: this.checkboxToValue(this.ui.wed),
            Thu: this.checkboxToValue(this.ui.thu),
            Fri: this.checkboxToValue(this.ui.fri),
            Sat: this.checkboxToValue(this.ui.sat),
            Sun: this.checkboxToValue(this.ui.sun)
          }
        };
      };

      CreatePosition.prototype.workloadChanged = function() {
        var workload;
        workload = parseFloat(this.ui.workload.val(), 10);
        return this.ui.pensum.html(Helpers.calculatePensum(workload));
      };

      return CreatePosition;

    })(Marionette.View);
  });

  positionsApp.start();

}).call(this);
